<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jdbc="http://www.springframework.org/schema/jdbc"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd" >

	<!--扫描service包下所有使用注解的类型-->
	<context:component-scan base-package="com.iqb.jxw.fes.filehandle"/>
	<!--<bean id="dataConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="ignoreUnresolvablePlaceholders" value="true" />-->
		<!--<property name="locations">-->
			<!--<list>-->
				<!--<value>classpath:res/env/config-${res_env_run}.properties</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->
	<context:property-placeholder location="classpath:res/env/config-${res_env_run}.properties" ignore-unresolvable="true" />

	<bean id="dataSource15" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${spi.dbms.driverClass}" />
		<property name="url" value="${spi.dbms.jdbcUrl}" />
		<property name="username" value="${spi.dbms.username}" />
		<property name="password" value="${spi.dbms.password}" />
		<property name="initialSize" value="${spi.dbms.initialPoolSize}" />
		<property name="maxActive" value="${spi.dbms.maxPoolSize}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<property name="removeAbandoned" value="true" />
 		<property name="removeAbandonedTimeout" value="9000" />
		<!--
			打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property
			name="poolPreparedStatements" value="true" /> <property
			name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		-->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="dataSourceLoacl" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${local.dbms.driverClass}" />
		<property name="url" value="${local.dbms.jdbcUrl}" />
		<property name="username" value="${local.dbms.username}" />
		<property name="password" value="${local.dbms.password}" />
		<property name="initialSize" value="${local.dbms.initialPoolSize}" />
		<property name="maxActive" value="${local.dbms.maxPoolSize}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="9000" />
		<!--
			打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property
			name="poolPreparedStatements" value="true" /> <property
			name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		-->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="mutipleDataSource" class="com.iqb.jxw.fes.filehandle.common.datesource.MutipleDataSource">
		<property name="defaultTargetDataSource" ref="dataSource15"></property>
		<property name="targetDataSources">
			<map>
				<entry value-ref="dataSource15" key="dataSource15"/>
				<entry value-ref="dataSourceLoacl" key="dataSourceLoacl"/>
			</map>
		</property>
	</bean>

	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mutipleDataSource" />
    </bean>
    
    <!-- 注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!--&lt;!&ndash; 拦截器方式配置事务 &ndash;&gt;
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash; 多表操作  &ndash;&gt;
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="choice*" propagation="SUPPORTS" />

            &lt;!&ndash; 单表操作  &ndash;&gt;
            <tx:method name="make*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="drop*" propagation="REQUIRED" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />

            &lt;!&ndash; 兼容，不推荐  &ndash;&gt;
            <tx:method name="select*" propagation="SUPPORTS" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />

            <tx:method name="add*" propagation="REQUIRED" />

            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.iqb.jxw.fes.**.service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>-->
	
     <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="mutipleDataSource" />
        <!--扫描entity包,使用别名,多个用;隔开-->
        <!--<property name="typeAliasesPackage" value="com.iqb.jxw.fes.filehandle.entity"/>-->
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapper/*.xml" >
	       <!--<array>-->
		     <!--<value>classpath:com/iqb/jxw/fes/filehandle/dao/*.xml</value>-->
			   <!--&lt;!&ndash;<value>classpath:mapper/*.xml</value>&ndash;&gt;-->
		   <!--</array>-->
        </property>
		<property name="configLocation" value="classpath:res/app/mybatis/mybatis-config.xml"></property>
    </bean>  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.iqb.jxw.fes.filehandle.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

	<aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>